# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from app.mod_service.sds_grpc import sds_image_matching_pb2 as sds__image__matching__pb2


class ImageMatchingStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.inference = channel.unary_unary(
        '/sds_image_matching.ImageMatching/inference',
        request_serializer=sds__image__matching__pb2.ImageMatching_Request.SerializeToString,
        response_deserializer=sds__image__matching__pb2.ImageMatching_Response.FromString,
        )


class ImageMatchingServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def inference(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImageMatchingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'inference': grpc.unary_unary_rpc_method_handler(
          servicer.inference,
          request_deserializer=sds__image__matching__pb2.ImageMatching_Request.FromString,
          response_serializer=sds__image__matching__pb2.ImageMatching_Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sds_image_matching.ImageMatching', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
